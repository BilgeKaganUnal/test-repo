name: TypeScript CI
on:
  pull_request:
    types: [opened, synchronize]

permissions:
  checks: write
  pull-requests: write
  contents: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }} # Checkout the PR branch

      - name: Install dependencies
        run: npm install

      - name: Create reports directory
        run: mkdir -p reports

      - name: Run TypeScript check
        id: tsc
        run: |
          set -o pipefail  # This ensures pipe failures are caught
          if ! npm run tsc -- --noEmit 2>&1 | tee reports/tsc-report.txt; then
            echo "tsc_failed=true" >> $GITHUB_ENV
            exit 1
          fi

      - name: Run ESLint
        id: eslint
        if: always() # Run even if TypeScript check failed
        run: |
          set -o pipefail  # This ensures pipe failures are caught
          if ! npm run lint 2>&1 | tee reports/lint-report.txt; then
            echo "eslint_failed=true" >> $GITHUB_ENV
            exit 1
          fi

      - name: Upload reports as artifacts
        if: failure() # This will run only if any previous step failed
        uses: actions/upload-artifact@v3
        with:
          name: ci-reports
          path: |
            reports/tsc-report.txt
            reports/lint-report.txt
          retention-days: 14

      - name: Save reports to branch
        if: failure() # Only save reports if there were failures
        run: |
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")

          # Create reports directory if it doesn't exist
          mkdir -p reports/history

          # Copy the reports with timestamps
          for file in reports/*.txt; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              base="${filename%.*}"
              cp "$file" "reports/history/${base}-${TIMESTAMP}.txt"
            fi
          done

          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Add and commit the reports
          git add reports/history/
          git commit -m "Add CI reports from ${TIMESTAMP}"
          git push origin ${{ github.head_ref }}

      - name: Comment on PR
        if: failure() # This will run only if any previous step failed
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tscFailed = '${{ env.tsc_failed }}' === 'true';
            const eslintFailed = '${{ env.eslint_failed }}' === 'true';

            const repoUrl = context.payload.repository.html_url;
            const branch = '${{ github.head_ref }}';

            let errorMessage = '❌ CI checks failed:\n\n';
            if (tscFailed) errorMessage += '- TypeScript compilation errors found\n';
            if (eslintFailed) errorMessage += '- ESLint violations found\n';

            errorMessage += '\nReports have been saved:\n';
            errorMessage += `- [View Reports](${repoUrl}/tree/${branch}/reports/history)\n`;
            errorMessage += `- [Download Reports](${repoUrl}/actions/runs/${context.runId}/artifacts)\n\n`;
            errorMessage += 'Please fix the issues before merging.';

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: errorMessage
            });

      - name: Report status
        if: always() # This will always run
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const conclusion = process.env.tsc_failed === 'true' || process.env.eslint_failed === 'true' 
              ? 'failure' 
              : 'success';
              
            const title = conclusion === 'failure' 
              ? 'Type checking or linting failed' 
              : 'All checks passed';
              
            const summary = conclusion === 'failure'
              ? 'Please fix the TypeScript or ESLint issues before merging.'
              : '✅ TypeScript and ESLint checks passed successfully.';
              
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'TypeScript CI',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: title,
                summary: summary
              }
            });
